<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cédric Scherer</title>
    <link>https://cedricscherer.com/</link>
    <description>Recent content on Cédric Scherer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cedricscherer.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cédric Scherer</title>
      <link>https://cedricscherer.com/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/</guid>
      <description></description>
    </item>

    <item>
      <title>DataViz</title>
      <link>https://cedricscherer.com/tags/dataviz/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/dataviz/</guid>
      <description></description>
    </item>

    <item>
      <title>design</title>
      <link>https://cedricscherer.com/tags/design/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/design/</guid>
      <description></description>
    </item>

    <item>
      <title>ggplot2</title>
      <link>https://cedricscherer.com/tags/ggplot2/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/ggplot2/</guid>
      <description></description>
    </item>

    <item>
      <title>maps</title>
      <link>https://cedricscherer.com/tags/maps/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/maps/</guid>
      <description></description>
    </item>

    <item>
      <title>Posts</title>
      <link>https://cedricscherer.com/post/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/post/</guid>
      <description></description>
    </item>

    <item>
      <title>Tags</title>
      <link>https://cedricscherer.com/tags/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/</guid>
      <description></description>
    </item>

    <item>
      <title>The World&#39;s Countries Colored by Their First Letter</title>
      <link>https://cedricscherer.com/2021/08/27/the-worlds-countries-colored-by-their-first-letter/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/2021/08/27/the-worlds-countries-colored-by-their-first-letter/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Next month, I am going to give a live training session for Pearson and O&amp;rsquo;Reilly called  “Hands-On Data Visualization with ggplot2”. For this course, I want to cover mapping with R and &lt;code&gt;{ggplot2}&lt;/code&gt; for the first time. While searching for a cool variable to illustrate how to create &lt;a href=&#34;https://www.data-to-viz.com/graph/choropleth.html&#34;&gt;choropleth maps&lt;/a&gt;, I came up with the idea to visualize name of each country. But not the full name—that would be too silly and not insightful at all—but the first letter of each country.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While drafting the first map, it quickly became obvious that mapping color to all 26 letters (or better 25 letters since there is no country starting with X) is not helpful at all. A quick search showed that there are a few colorful maps, struggling with the same problem (&lt;a href=&#34;https://www.reddit.com/r/Maps/comments/jfudnt/map_of_the_world_painted_according_to_the_first/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://www.reddit.com/r/mapporncirclejerk/comments/oujs8i/if_every_country_that_has_the_same_first_letter/&#34;&gt;here&lt;/a&gt;) or that do not permit to see the complete data by &lt;a href=&#34;http://alphabetpassport.com/world.png&#34;&gt;aggregating rare letters&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I quickly came up to use small multiples, which would allow for an easy identification of all countries starting with a particular letter and the landmass covered by these countries. Thanks to &lt;code&gt;{ggplot2}&lt;/code&gt;’s facet functionality, it was super–easy to turn it into small multiples.&lt;/p&gt;
&lt;img src=&#34;https://www.cedricscherer.com/img/world-by-letters/letter_world_poster.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/letter_world_poster.png&#39;, &#39;blank&#39;);&#34;/&gt;
&lt;p&gt;&lt;figcaption class=&#34;small&#34; align=&#34;center&#34; style=&#34;color:#8c8c8c;font-style:italic;&#34;&gt;The final poster version with the colorful overview map and 25 small maps, one for each letter.&lt;/figcaption&gt;&lt;/p&gt;&lt;br&gt;
&lt;h5 id=&#34;project-type&#34;&gt;Project Type&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Personal Project&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;motivation&#34;&gt;Motivation&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Finding a cool variable in the NaturalEarth data set to visualize.&lt;/li&gt;
&lt;li&gt;Curiosity: Which letter covers the largest area, which are rare?&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;design-choices&#34;&gt;Design Choices&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Small multiples&lt;/em&gt; to allow for direct access of single letters which allows also to add the area covered to each map.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;cyclical color palette&lt;/em&gt;; of course, 25 categories are too many but with this approach one can at least identify the range a country falls into.  Color-vision deficiency problems are likely but not problematic thanks to the small multiples.&lt;/li&gt;
&lt;li&gt;I searched through a ton of fonts: I settled on &lt;a href=&#34;https://pangrampangram.com/products/hatton&#34;&gt;&lt;em&gt;Hatton&lt;/em&gt;&lt;/a&gt; for the title and letters and &lt;a href=&#34;https://www.omnibus-type.com/fonts/chivo/&#34;&gt;&lt;em&gt;Chivo&lt;/em&gt;&lt;/a&gt; with its tabular numbers for the areas and the caption.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;data-source&#34;&gt;Data Source&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.naturalearthdata.com/&#34;&gt;NaturalEarth&lt;/a&gt; for the country boundaries via the &lt;a href=&#34;https://docs.ropensci.org/rnaturalearthdata/&#34;&gt;&lt;code&gt;{rnaturalearth}&lt;/code&gt; R package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Country names from the &lt;a href=&#34;https://www.cia.gov/the-world-factbook/&#34;&gt;CIA World Factbook&lt;/a&gt;, contained in the world data set&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;tools&#34;&gt;Tools&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Data: &lt;a href=&#34;https://docs.ropensci.org/rnaturalearthdata/&#34;&gt;&lt;code&gt;{rnaturalearth}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Data Preparation: &lt;a href=&#34;https://stringr.tidyverse.org/&#34;&gt;&lt;code&gt;{stringr}&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://r-spatial.github.io/sf/&#34;&gt;&lt;code&gt;{sf}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Graphics: &lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;&lt;code&gt;{ggplot2}&lt;/code&gt;&lt;/a&gt;; &lt;a href=&#34;https://wilkelab.org/ggtext/&#34;&gt;&lt;code&gt;{ggtext}&lt;/code&gt;&lt;/a&gt; for title and caption; &lt;a href=&#34;https://patchwork.data-imaginist.com/&#34;&gt;&lt;code&gt;{patchwork}&lt;/code&gt;&lt;/a&gt; for plot composition&lt;/li&gt;
&lt;li&gt;Colors: &lt;a href=&#34;https://help.tableau.com/current/pro/desktop/en-us/formatting_create_custom_colors.htm&#34;&gt;Tableau cyclic color palette&lt;/a&gt; via the &lt;a href=&#34;https://jrnold.github.io/ggthemes/index.html&#34;&gt;&lt;code&gt;{ggthemes}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;methods&#34;&gt;Methods&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;I had to choose one source for the names; after checking several naming conventions, I settled on those provided by the CIA World Factbook. Why? Because this was the easiest way to get rid of &amp;ldquo;Republic&amp;rdquo; and other prefixes and it has a pretty good coverage.&lt;/li&gt;
&lt;li&gt;For each country, I checked if a name is provided by the CIA world Factbook; if not, I used the sovereignty provided by NaturalEarth.&lt;/li&gt;
&lt;li&gt;For each country in the shape file, I extracted the first letter with the help of the &lt;a href=&#34;https://stringr.tidyverse.org/&#34;&gt;&lt;code&gt;{stringr}&lt;/code&gt; R package&lt;/a&gt; from the tidyverse.&lt;/li&gt;
&lt;li&gt;For each letter I calculated the area covered with the help of the &lt;a href=&#34;https://r-spatial.github.io/sf/&#34;&gt;&lt;code&gt;{sf}&lt;/code&gt; package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Plotting was done completely in R (for a list of packages see &amp;ldquo;Tools&amp;rdquo;).&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;alternative-versions&#34;&gt;Alternative Versions&lt;/h2&gt;
&lt;h5 id=&#34;single-version-of-the-small-multiples&#34;&gt;Single Version of the Small Multiples&lt;/h5&gt;
&lt;img src=&#34;https://www.cedricscherer.com/img/world-by-letters/letter_world_facet_top.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/letter_world_facet_top.png&#39;, &#39;blank&#39;);&#34;&gt;
&lt;img src=&#34;https://www.cedricscherer.com/img/world-by-letters/letter_world_facet_left.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/letter_world_facet_left.png&#39;, &#39;blank&#39;);&#34;&gt;
&lt;h5 id=&#34;single-version-of-the-overview-map&#34;&gt;Single Version of the Overview Map&lt;/h5&gt;
&lt;img src=&#34;https://www.cedricscherer.com/img/world-by-letters/letter_world_v1.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/letter_world_v1.png&#39;, &#39;blank&#39;);&#34;&gt;
&lt;img src=&#34;https://www.cedricscherer.com/img/world-by-letters/letter_world_v2.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/letter_world_v2.png&#39;, &#39;blank&#39;);&#34;&gt;
&lt;h2 id=&#34;how-about-the-last-letter&#34;&gt;How about the last letter?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/humeursdevictor&#34;&gt;Victor&lt;/a&gt; asked on Twitter if there is some interesting patterns when looking at the last letter of each country. I had no idea so I went ahead and mapped it. I had to make more assumptions here since several countries in the CIA World Factbook end e.g. with &amp;ldquo;, Republic of&amp;rdquo; or something wrapped into parentheses. I decided to remove these bits and pick the last letter of these adjusted CIA World Factbook names.&lt;/p&gt;
&lt;img src=&#34;https://www.cedricscherer.com/img/world-by-letters/last_letter_world_poster.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/last_letter_world_poster.png&#39;, &#39;blank&#39;);&#34;&gt;
&lt;img src=&#34;https://www.cedricscherer.com/img/world-by-letters/last_letter_world_v1.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/last_letter_world_v1.png&#39;, &#39;blank&#39;);&#34;&gt;
&lt;img src=&#34;https://www.cedricscherer.com/img/world-by-letters/last_letter_world_facet_left.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/last_letter_world_facet_left.png&#39;, &#39;blank&#39;);&#34;&gt;
</description>
    </item>

    <item>
      <title>A Quick How-to on Labelling Bar Graphs in ggplot2</title>
      <link>https://cedricscherer.com/2021/07/05/a-quick-how-to-on-labelling-bar-graphs-in-ggplot2/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/2021/07/05/a-quick-how-to-on-labelling-bar-graphs-in-ggplot2/</guid>
      <description>
&lt;script src=&#34;https://cedricscherer.com/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;table-of-content&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Table of Content&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data&#34;&gt;Data Preparation with the &lt;code&gt;tidyverse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dataviz&#34;&gt;Data Visualization with &lt;code&gt;ggplot2&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-1&#34;&gt;How to Calculate the Percentage Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-2&#34;&gt;How to Position the Percentage Labels Inside the Bars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-3&#34;&gt;How to Color the Bars Using Different Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#polish&#34;&gt;Polish Your Plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#accessibility&#34;&gt;Alternatives Improving the Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;intro&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Bar charts are likely the most common chart type out there and come in several varieties. Most notably, direct labels can increase accessibility of a bar graph and reduce the “chart junk” since grid lines, axis labels, and even axis titles become obsolete. Ordering your bar charts make sense in case the categorical value has no internal order and helps focusing on the largest and smallest groups. In addition, one can highlight specific bars with use of custom colors. It is pretty easy to improve your ggplot with a few lines of code. And this short tutorial shows you multiple ways how to do so.&lt;/p&gt;
&lt;p&gt;A few days ago, I got a request on some code creating bar charts with individual colors and percentage labels with the &lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;&lt;code&gt;{ggplot2}&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Watching your &lt;a href=&#34;https://www.youtube.com/watch?v=5KHvEXYtnOo&#34;&gt;webinar about ggplot2 on UseR Oslo YouTube Channel&lt;/a&gt;, I noticed some charts you made for a project called &lt;a href=&#34;https://www.kuendigung.org/studien/verbraucherumfrage-zur-zukunft-nach-der-krise/&#34;&gt;‘Survey on contract termination during the COVID-19 pandemic for kuendigung.org’&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Because they have many interesting aesthetic features, I started looking for source code on your &lt;a href=&#34;https://github.com/z3tt&#34;&gt;GitHub repo&lt;/a&gt;, but I didn’t find anything. So, I kindly ask you if you can share the code you used to create those charts (or share its location), hoping that it is not copyrighted material.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;https://www.kuendigung.org/downloads/studie/verbraucherumfrage-zur-zukunft-nach-der-krise/11_1_solidaritaet_erstattung_id_1.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain;&#34;&gt;
&lt;p&gt;
&lt;figcaption class=&#34;small&#34; align=&#34;center&#34; style=&#34;color:#8c8c8c;font-style:italic;&#34;&gt;
The simple bar chart I made for &lt;a href=&#34;https://www.kuendigung.org/studien/verbraucherumfrage-zur-zukunft-nach-der-krise/&#34;&gt;kuendigung.org&lt;/a&gt;. Note that this was a multiple choice question and thus the sum is larger than 100%.
&lt;/figcaption&gt;
&lt;/p&gt;
&lt;p&gt;Specifically, the main things of interest where:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;How to &lt;strong&gt;calculate the percentage values&lt;/strong&gt;?&lt;br&gt;(Did you use a &lt;code&gt;{ggplot2}&lt;/code&gt; function or calculate them manually?)&lt;/li&gt;
&lt;li&gt;How to &lt;strong&gt;position the percentage labels inside&lt;/strong&gt; the bars?&lt;/li&gt;
&lt;li&gt;How to &lt;strong&gt;color the bars&lt;/strong&gt; using different colors?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unfortunately, the code is under lock but it’s a simple bar chart with some labels, so I will walk you through a short toy example using the manufacturers data set &lt;code&gt;mpg&lt;/code&gt; that comes with &lt;code&gt;{ggplot2}&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Preparation with the tidyverse&lt;/h2&gt;
&lt;p&gt;First, let’s prepare the data for the bar chart. We are going to use the data from 2008 only and summarize the number of car model variants in the data per manufacturer. We also adjust the manufacturer labels and order them as they should appear in the final plot. Here are some notes on some of the functions used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;count()&lt;/code&gt; from the &lt;a href=&#34;https://dplyr.tidyverse.org/&#34;&gt;&lt;code&gt;{dplyr}&lt;/code&gt; package&lt;/a&gt; is a wrapper of &lt;code&gt;group_by(var) %&amp;gt;% summarize(n = n()))&lt;/code&gt;. It allows you to sort the values which is useful here because we want to order the bars based on their value in our visualization.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_to_title()&lt;/code&gt; from the &lt;a href=&#34;https://stringr.tidyverse.org/&#34;&gt;&lt;code&gt;{stringr}&lt;/code&gt; package&lt;/a&gt; is a quick way to capitalize labels.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fct_lump()&lt;/code&gt;, &lt;code&gt;fct_inorder()&lt;/code&gt;, &lt;code&gt;fct_rev()&lt;/code&gt;, and &lt;code&gt;fct_relevel()&lt;/code&gt; are all from the &lt;a href=&#34;https://forcats.tidyverse.org/&#34;&gt;&lt;code&gt;{forcats}&lt;/code&gt; package&lt;/a&gt; that provides helpers for reordering factor levels.
&lt;ul&gt;
&lt;li&gt;First, we group all manufacturers together that do not belong to the top 10 with &lt;code&gt;fct_lump()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since our data set is sorted in descending order thanks to &lt;code&gt;count()&lt;/code&gt;, we first order them by appearance with &lt;code&gt;fct_inorder()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Afterwards, we reverse them with &lt;code&gt;fct_rev()&lt;/code&gt;(so that the bar with the highest value is on top).&lt;/li&gt;
&lt;li&gt;Finally, we move the category “Other” to the end (as the first level) with &lt;code&gt;fct_relevel()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

mpg_sum &amp;lt;- mpg %&amp;gt;%
  ## just use 2008 data
  dplyr::filter(year == 2008) %&amp;gt;%
  ## turn into lumped factors with capitalized names
  dplyr::mutate(
    manufacturer = stringr::str_to_title(manufacturer),
    manufacturer = forcats::fct_lump(manufacturer, n = 10)
  ) %&amp;gt;%
  ## add counts
  dplyr::count(manufacturer, sort = TRUE) %&amp;gt;%
  ## order factor levels by number, put &amp;quot;Other&amp;quot; to end
  dplyr::mutate(
    manufacturer = forcats::fct_rev(forcats::fct_inorder(manufacturer)),
    manufacturer = forcats::fct_relevel(manufacturer, &amp;quot;Other&amp;quot;, after = 0)
  )

mpg_sum&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 11 x 2
##    manufacturer     n
##    &amp;lt;fct&amp;gt;        &amp;lt;int&amp;gt;
##  1 Dodge           21
##  2 Toyota          14
##  3 Chevrolet       12
##  4 Volkswagen      11
##  5 Other           11
##  6 Ford            10
##  7 Audi             9
##  8 Hyundai          8
##  9 Subaru           8
## 10 Nissan           7
## 11 Jeep             6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s check if our factor reordering worked:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;levels(mpg_sum$manufacturer)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Other&amp;quot;      &amp;quot;Jeep&amp;quot;       &amp;quot;Nissan&amp;quot;     &amp;quot;Subaru&amp;quot;     &amp;quot;Hyundai&amp;quot;
##  [6] &amp;quot;Audi&amp;quot;       &amp;quot;Ford&amp;quot;       &amp;quot;Volkswagen&amp;quot; &amp;quot;Chevrolet&amp;quot;  &amp;quot;Toyota&amp;quot;
## [11] &amp;quot;Dodge&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Keep in mind that we have reversed the ordering since &lt;code&gt;{ggplot2}&lt;/code&gt; plots factors from bottom to top when being mapped to &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;dataviz&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Visualization with ggplot2&lt;/h2&gt;
&lt;p&gt;First, let’s draw the basic bar chart using our aggregated and ordered data set called &lt;code&gt;mpg_sum&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  ## draw bars
  geom_col(fill = &amp;quot;gray70&amp;quot;) +
  ## change plot appearance
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;how-to-1&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;How to Calculate the Percentage Values&lt;/h5&gt;
&lt;p&gt;We can go both routes, either creating the labels first or on the fly. However, creating the bars and labels with the help of &lt;code&gt;geom_bar()&lt;/code&gt; and &lt;code&gt;stat_summary(geom = &#34;text&#34;)&lt;/code&gt; is a bit more difficult and I prefer to build a temporary data frame for that task. The benefit is that you always can control and check the output, i.e. the sorting of the factor and the formatting of the labels.&lt;/p&gt;
&lt;p&gt;Here are two ways how to quickly add the percentage labels to your data set. The percentage can be easily calculated by dividing the number of cars per manufacturer &lt;code&gt;n&lt;/code&gt; by the total number of cars &lt;code&gt;sum(n)&lt;/code&gt;, times 100. &lt;code&gt;sprintf()&lt;/code&gt; is a handy function to format text and variables. &lt;code&gt;sprintf()&lt;/code&gt; allows you to include for example leading spaces (not important here but useful for left-aligned labels) and zero digits (e.g. &lt;code&gt;12.0%&lt;/code&gt; instead of &lt;code&gt;12%&lt;/code&gt; which is useful here). The syntax is likely confusing for you because it relies on the C library of the same name. Here, we want to retrieve 4 characters in total, 1 of the to the right of the decimal. See &lt;a href=&#34;https://www.php.net/manual/en/function.sprintf.php&#34;&gt;here&lt;/a&gt; for more about the parameters one can use. Using &lt;code&gt;paste0&lt;/code&gt;, or alternatively the &lt;code&gt;glue()&lt;/code&gt; function from the &lt;a href=&#34;https://glue.tidyverse.org/&#34;&gt;&lt;code&gt;{glue}&lt;/code&gt; package&lt;/a&gt;, we add the percentage symbol to that number.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_sum &amp;lt;- mpg_sum %&amp;gt;%
  ## add percentage label with `sprintf()`
  dplyr::mutate(perc = paste0(sprintf(&amp;quot;%4.1f&amp;quot;, n / sum(n) * 100), &amp;quot;%&amp;quot;))

mpg_sum&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 11 x 3
##    manufacturer     n perc
##    &amp;lt;fct&amp;gt;        &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
##  1 Dodge           21 &amp;quot;17.9%&amp;quot;
##  2 Toyota          14 &amp;quot;12.0%&amp;quot;
##  3 Chevrolet       12 &amp;quot;10.3%&amp;quot;
##  4 Volkswagen      11 &amp;quot; 9.4%&amp;quot;
##  5 Other           11 &amp;quot; 9.4%&amp;quot;
##  6 Ford            10 &amp;quot; 8.5%&amp;quot;
##  7 Audi             9 &amp;quot; 7.7%&amp;quot;
##  8 Hyundai          8 &amp;quot; 6.8%&amp;quot;
##  9 Subaru           8 &amp;quot; 6.8%&amp;quot;
## 10 Nissan           7 &amp;quot; 6.0%&amp;quot;
## 11 Jeep             6 &amp;quot; 5.1%&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One could also use the &lt;code&gt;percent()&lt;/code&gt; function from the &lt;code&gt;{scales}&lt;/code&gt; package. The accuracy determines the number of digits (here &lt;code&gt;.1&lt;/code&gt;) and we can similarly add the leading white space by setting &lt;code&gt;trim&lt;/code&gt; to &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_sum %&amp;gt;%
  ## add percentage label with `scales::percent()`
  dplyr::mutate(perc = scales::percent(n / sum(n), accuracy = .1, trim = FALSE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 11 x 3
##    manufacturer     n perc
##    &amp;lt;fct&amp;gt;        &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
##  1 Dodge           21 &amp;quot;17.9%&amp;quot;
##  2 Toyota          14 &amp;quot;12.0%&amp;quot;
##  3 Chevrolet       12 &amp;quot;10.3%&amp;quot;
##  4 Volkswagen      11 &amp;quot; 9.4%&amp;quot;
##  5 Other           11 &amp;quot; 9.4%&amp;quot;
##  6 Ford            10 &amp;quot; 8.5%&amp;quot;
##  7 Audi             9 &amp;quot; 7.7%&amp;quot;
##  8 Hyundai          8 &amp;quot; 6.8%&amp;quot;
##  9 Subaru           8 &amp;quot; 6.8%&amp;quot;
## 10 Nissan           7 &amp;quot; 6.0%&amp;quot;
## 11 Jeep             6 &amp;quot; 5.1%&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So let’s add the prepared percentage label to our bar graph with &lt;code&gt;geom_text()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  geom_col(fill = &amp;quot;gray70&amp;quot;) +
  ## add percentage labels
  geom_text(aes(label = perc)) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-with-labels-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And in case you want to add some more description to one of the bars, you can use an &lt;code&gt;if_else()&lt;/code&gt; (or an &lt;code&gt;ifelse()&lt;/code&gt;) statement like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_sum &amp;lt;- mpg_sum %&amp;gt;%
  dplyr::mutate(
    perc = paste0(sprintf(&amp;quot;%4.1f&amp;quot;, n / sum(n) * 100), &amp;quot;%&amp;quot;),
    ## customize label for the first category
    perc = if_else(row_number() == 1, paste(perc, &amp;quot;of all car models&amp;quot;), perc)
  )

ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  geom_col(fill = &amp;quot;gray70&amp;quot;) +
  geom_text(aes(label = perc)) +
  ## make sure labels doesn&amp;#39;t get cut
  scale_x_continuous(limits = c(NA, 24)) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/perc-label-custom-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To illustrate how to create and place the labels on the fly, here is an example with labels showing counts per manufacturer (with percentage labels it gets a bit more complicated). We use &lt;code&gt;geom_bar()&lt;/code&gt; instead of &lt;code&gt;geom_col()&lt;/code&gt; which takes not two but only one variable and calculates counts by default. To add the labels, we again use &lt;code&gt;geom_text()&lt;/code&gt; but this time we overwrite the default statistical transformation &lt;code&gt;stat = &#34;identity&#34;&lt;/code&gt; with &lt;code&gt;stat = &#34;count&#34;&lt;/code&gt; (the same as the default for &lt;code&gt;geom_bar()&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## prepare non-aggregated data set with lumped and ordered factors
mpg_fct &amp;lt;- mpg %&amp;gt;%
  dplyr::filter(year == 2008) %&amp;gt;%
  dplyr::mutate(
    ## add count to calculate percentages later
    total = dplyr::n(),
    ## turn into lumped factors with capitalized names
    manufacturer = stringr::str_to_title(manufacturer),
    manufacturer = forcats::fct_lump(manufacturer, n = 10),
    ## order factor levels by number, put &amp;quot;Other&amp;quot; to end
    manufacturer = forcats::fct_rev(forcats::fct_infreq(manufacturer)),
    manufacturer = forcats::fct_relevel(manufacturer, &amp;quot;Other&amp;quot;, after = 0)
  )

ggplot(mpg_fct, aes(x = manufacturer)) +
  geom_bar(fill = &amp;quot;gray70&amp;quot;) +
  ## add count labels
  geom_text(
    stat = &amp;quot;count&amp;quot;,
    aes(label = ..count..)
  ) +
  ## rotate plot
  coord_flip()  +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-summary-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the default settings of &lt;code&gt;geom_text()&lt;/code&gt; place the labels exactly on the border. To make it look good, we need to adjust the positioning of the labels. So let’s move on to the next question!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-2&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;How to Position the Percentage Labels Inside the Bars&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;geom_text()&lt;/code&gt; function comes with arguments that help you to align and position text labels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hjust&lt;/code&gt; and &lt;code&gt;vjust&lt;/code&gt;: the horizontal and vertical justification to align text.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nudge_x&lt;/code&gt; and &lt;code&gt;nudge_y&lt;/code&gt;: the horizontal and vertical adjustment to offset text from points.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To put the labels inside, we first need to right-align the labels with &lt;code&gt;hjust = 1&lt;/code&gt;. We also add some negative horizontal adjustment via &lt;code&gt;nudge_x = -.5&lt;/code&gt; to add some spacing between the end of the bar and the label.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  geom_col(fill = &amp;quot;gray70&amp;quot;) +
  geom_text(
    aes(label = perc),
    ## make labels left-aligned
    hjust = 1, nudge_x = -.5
  ) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-labels-inside-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In case you want to put the next to the bars, you often need to adjust the plot margin and/or the limits to avoid that the labels are cut off. The drawback of using limits is that you have to define them manually. Thus, I prefer to use the first approach. You can make sure that labels are not truncated by the panel by adding &lt;code&gt;clip = &#34;off&#34;&lt;/code&gt; to any coordinate system.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
💁 &lt;i&gt;Expand to see examples with labels next to the bars.&lt;/i&gt;
&lt;/summary&gt;
&lt;p&gt;Increase space on the right via &lt;code&gt;theme(plot.margin)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  geom_col(fill = &amp;quot;gray70&amp;quot;) +
  geom_text(
    aes(label = perc),
    hjust = 0, nudge_x = .5
  ) +
  ## make sure labels doesn&amp;#39;t get cut, part 1
  coord_cartesian(clip = &amp;quot;off&amp;quot;) +
  theme_minimal() +
  ## make sure labels doesn&amp;#39;t get cut, part 2
  theme(plot.margin = margin(r = 120))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-labels-outside-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Increase space on the right via &lt;code&gt;scale_x_continuous(limits)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  geom_col(fill = &amp;quot;gray70&amp;quot;) +
  geom_text(
    aes(label = perc),
    hjust = 0, nudge_x = .5
  ) +
  ## make sure labels doesn&amp;#39;t get cut
  scale_x_continuous(limits = c(NA, 30)) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-labels-outside-2-1.png&#34; width=&#34;672&#34; /&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-3&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;How to Color the Bars Using Different Colors&lt;/h5&gt;
&lt;p&gt;Again, there are many ways how to add custom colors. As the first approach, we create the color palette as a vector based on our summarized data set. Let’s pick some colors that are similar to the original plot we started with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## create color palette based on input data
pal &amp;lt;- c(
  &amp;quot;gray85&amp;quot;,
  rep(&amp;quot;gray70&amp;quot;, length(mpg_sum$manufacturer) - 4),
  &amp;quot;coral2&amp;quot;, &amp;quot;mediumpurple1&amp;quot;, &amp;quot;goldenrod1&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this approach, we create a vector that holds the colors for each of the levels—from the lowest bar to the bar with the most values.
We can use the &lt;code&gt;length&lt;/code&gt; of the manufacturer column for all non-highlighted bars and subtract the number of bars we want to highlight. Here, we have a colorful top 3 and a lighter “Other” category. The vector can then be used in combination with &lt;code&gt;scale_color|fill_manual()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, we can use the custom palette to color each bar by mapping &lt;code&gt;manufacturer&lt;/code&gt; to the bar’s &lt;code&gt;fill&lt;/code&gt; property and by passing the &lt;code&gt;pals&lt;/code&gt; vector to &lt;code&gt;scale_fill_manual()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer,
                    fill = manufacturer)) +
  geom_col() +
  geom_text(
    aes(label = perc),
    hjust = 1, nudge_x = -.5
  ) +
  ## add custom colors
  scale_fill_manual(values = pal, guide = &amp;quot;none&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-color-manual-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One could also add the color to the data set and map the fill to that column and use &lt;code&gt;scale_fill_identity()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_sum &amp;lt;-
  mpg_sum %&amp;gt;%
  mutate(
    color = case_when(
      row_number() == 1 ~ &amp;quot;goldenrod1&amp;quot;,
      row_number() == 2 ~ &amp;quot;mediumpurple1&amp;quot;,
      row_number() == 3 ~ &amp;quot;coral2&amp;quot;,
      manufacturer == &amp;quot;Other&amp;quot; ~ &amp;quot;gray85&amp;quot;,
      ## all others should be gray
      TRUE ~ &amp;quot;gray70&amp;quot;
    )
  )

ggplot(mpg_sum, aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_text(
    aes(label = perc),
    hjust = 1, nudge_x = -.5
  ) +
  ## add custom colors
  scale_fill_identity(guide = &amp;quot;none&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/palette-as-col-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This approach is less error-prone since the color is tied to the properties of the data. Thus, in case we update the data, the colors are still applied correctly.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
💁 &lt;i&gt;Expand to see that it still works with “updated” data.&lt;/code&gt;&lt;/i&gt;
&lt;/summary&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg %&amp;gt;%
  ## use 1999 data now
  dplyr::filter(year == 1999) %&amp;gt;%
  dplyr::mutate(
    manufacturer = stringr::str_to_title(manufacturer),
    manufacturer = forcats::fct_lump(manufacturer, n = 10)
  ) %&amp;gt;%
  dplyr::count(manufacturer, sort = TRUE) %&amp;gt;%
  dplyr::mutate(
    manufacturer = forcats::fct_rev(forcats::fct_inorder(manufacturer)),
    manufacturer = forcats::fct_relevel(manufacturer, &amp;quot;Other&amp;quot;, after = 0),
    perc = paste0(sprintf(&amp;quot;%4.1f&amp;quot;, n / sum(n) * 100), &amp;quot;%&amp;quot;),
    perc = if_else(row_number() == 1, paste(perc, &amp;quot;of all car models&amp;quot;), perc),
    color = case_when(
      row_number() == 1 ~ &amp;quot;goldenrod1&amp;quot;,
      row_number() == 2 ~ &amp;quot;mediumpurple1&amp;quot;,
      row_number() == 3 ~ &amp;quot;coral2&amp;quot;,
      manufacturer == &amp;quot;Other&amp;quot; ~ &amp;quot;gray85&amp;quot;,
      TRUE ~ &amp;quot;gray70&amp;quot;
    )
  ) %&amp;gt;%
  ggplot(aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_text(
    aes(label = perc),
    hjust = 1, nudge_x = -.5
  ) +
  scale_fill_identity(guide = &amp;quot;none&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;polish&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Polish Your Plot&lt;/h5&gt;
&lt;p&gt;Finally, we can adjust the visual appearance a bit, most importantly reduce redundancy. Since I only want to keep the labels on the y axis, I use &lt;code&gt;theme_void()&lt;/code&gt; and add the axis text afterwards again. Here, I use a custom font for both the axis text and the percentage labels and adjust the font size. (I am not going to cover it here but in case you want to include custom fonts, check the &lt;a href=&#34;https://github.com/r-lib/systemfonts&#34;&gt;&lt;code&gt;{systemfonts}&lt;/code&gt; package&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;{ggplot2}&lt;/code&gt; adds some padding to each axis which results in labels that are a bit off. To decrease the distance between the y axis text and the bars, adjust the expansion argument &lt;code&gt;expand&lt;/code&gt; in the according scale, here &lt;code&gt;scale_x_continuous()&lt;/code&gt;. I also add some white space around the plot by setting a &lt;code&gt;plot.margin&lt;/code&gt; which is of type &lt;code&gt;element_rect()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_text(
    aes(label = perc),
    hjust = 1, nudge_x = -.5,
    size = 4, fontface = &amp;quot;bold&amp;quot;, family = &amp;quot;Fira Sans&amp;quot;
  ) +
  ## reduce spacing between labels and bars
  scale_x_continuous(expand = c(.01, .01)) +
  scale_fill_identity(guide = &amp;quot;none&amp;quot;) +
  ## get rid of all elements except y axis labels + adjust plot margin
  theme_void() +
  theme(axis.text.y = element_text(size = 14, hjust = 1, family = &amp;quot;Fira Sans&amp;quot;),
        plot.margin = margin(rep(15, 4)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/full-plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can find the full code to create the final plot in this &lt;a href=&#34;https://gist.github.com/z3tt/7bc5d9822a7fff409085073c601f29d5&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;accessibility&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Alternatives Improving the Accessibility&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; Some feedback suggested that placing labels inside the bars can hinder accessibility due to contrast issues. I fully agree, so I want to present some approaches to decrease that barrier without the need to increase the white space towards the right when placing labels next to the bars.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version with label boxes instead of pure text:&lt;/strong&gt;&lt;br /&gt;
We can replace &lt;code&gt;geom_text()&lt;/code&gt; with &lt;code&gt;geom_label()&lt;/code&gt; which adds a box around each label. While it doesn’t look as good, the high contrast of black labels on white ground maximizes readability.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_label(
    aes(label = perc),
    hjust = 1, nudge_x = -.5,
    size = 4, fontface = &amp;quot;bold&amp;quot;, family = &amp;quot;Fira Sans&amp;quot;,
    ## turn into white box without outline
    fill = &amp;quot;white&amp;quot;, label.size = 0
  ) +
  scale_x_continuous(expand = c(.01, .01)) +
  scale_fill_identity(guide = &amp;quot;none&amp;quot;) +
  theme_void() +
  theme(
    axis.text.y = element_text(size = 14, hjust = 1, family = &amp;quot;Fira Sans&amp;quot;),
    plot.margin = margin(rep(15, 4))
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-geom-label-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version with different label placement:&lt;/strong&gt;
I like the idea of placing only those labels inside that mess up the aspect ratio due to their length. In our case, that’s only the first entry. We can place the labels differently by mapping a new created column &lt;code&gt;place&lt;/code&gt; to the &lt;code&gt;hjust&lt;/code&gt; argument. Since we cannot map a variable to &lt;code&gt;nudge_x&lt;/code&gt;, we cannot use it to offset the labels. To add some pacing, I simply add some white space to the begin and end of each percentage label.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_sum %&amp;gt;%
  mutate(
    ## set justification based on data
    ## so that only the first label is placed inside
    place = if_else(row_number() == 1, 1, 0),
    ## add some spacing to labels since we cant use nudge_x anymore
    perc = paste(&amp;quot; &amp;quot;, perc, &amp;quot; &amp;quot;)
  ) %&amp;gt;%
  ggplot(aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_text(
    aes(label = perc, hjust = place),
    size = 4, fontface = &amp;quot;bold&amp;quot;, family = &amp;quot;Fira Sans&amp;quot;
  ) +
  scale_x_continuous(expand = c(.01, .01)) +
  scale_fill_identity(guide = &amp;quot;none&amp;quot;) +
  theme_void() +
  theme(
    axis.text.y = element_text(size = 14, hjust = 1, family = &amp;quot;Fira Sans&amp;quot;),
    plot.margin = margin(rep(15, 4))
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-alternating-labs-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version placing the long label not at the top:&lt;/strong&gt;
We could also add the “of all car models” bit to a bar that is short enough to ensure that the label does not extend beyond the usual width of the plot. In our example, the second bar in our case fulfills this condition:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_sum %&amp;gt;%
  ## overwrite old percentage labels
  mutate(
    perc = paste0(sprintf(&amp;quot;%4.1f&amp;quot;, n / sum(n) * 100), &amp;quot;%&amp;quot;),
    perc = if_else(row_number() == 2, paste(perc, &amp;quot;of all car models&amp;quot;), perc)
  ) %&amp;gt;%
  ggplot(aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_text(
    aes(label = perc,),
    hjust = 0, nudge_x = .5,
    size = 4, fontface = &amp;quot;bold&amp;quot;, family = &amp;quot;Fira Sans&amp;quot;
  ) +
  ## make sure labels doesn&amp;#39;t get cut, part 1
  coord_cartesian(clip = &amp;quot;off&amp;quot;) +
  scale_x_continuous(expand = c(.01, .01)) +
  scale_fill_identity(guide = &amp;quot;none&amp;quot;) +
  theme_void() +
  theme(
    axis.text.y = element_text(size = 14, hjust = 1, family = &amp;quot;Fira Sans&amp;quot;),
    ## make sure labels doesn&amp;#39;t get cut, part 2
    plot.margin = margin(15, 30, 15, 15)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-lab-2nd-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Of course, you could add that information also to the title, figure caption or simply leave it out. But that’s not what the request was about 🤷&lt;/p&gt;
&lt;details&gt;
&lt;summary style=&#34;font-size:10pt;&#34;&gt;
R Session Info
&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.1.0 (2021-05-18)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 19043)
##
## Matrix products: default
##
## locale:
## [1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252
## [3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C
## [5] LC_TIME=German_Germany.1252
## system code page: 65001
##
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base
##
## other attached packages:
##  [1] forcats_0.5.1     stringr_1.4.0     dplyr_1.0.7       purrr_0.3.4
##  [5] readr_1.4.0       tidyr_1.1.3       tibble_3.1.2      ggplot2_3.3.5
##  [9] tidyverse_1.3.1   systemfonts_1.0.2
##
## loaded via a namespace (and not attached):
##  [1] Rcpp_1.0.7        lubridate_1.7.10  assertthat_0.2.1  digest_0.6.27
##  [5] utf8_1.2.1        R6_2.5.0          cellranger_1.1.0  backports_1.2.1
##  [9] reprex_2.0.0      evaluate_0.14     highr_0.9         httr_1.4.2
## [13] blogdown_1.3      pillar_1.6.1      rlang_0.4.11      readxl_1.3.1
## [17] rstudioapi_0.13   jquerylib_0.1.4   rmarkdown_2.9     textshaping_0.3.5
## [21] labeling_0.4.2    munsell_0.5.0     broom_0.7.8       compiler_4.1.0
## [25] modelr_0.1.8      xfun_0.24         pkgconfig_2.0.3   htmltools_0.5.1.1
## [29] tidyselect_1.1.1  bookdown_0.22     fansi_0.5.0       crayon_1.4.1
## [33] dbplyr_2.1.1      withr_2.4.2       grid_4.1.0        jsonlite_1.7.2
## [37] gtable_0.3.0      lifecycle_1.0.0   DBI_1.1.1         magrittr_2.0.1
## [41] scales_1.1.1      cli_3.0.0         stringi_1.7.3     farver_2.1.0
## [45] fs_1.5.0          xml2_1.3.2        bslib_0.2.5.1     ellipsis_0.3.2
## [49] ragg_1.1.3        generics_0.1.0    vctrs_0.3.8       tools_4.1.0
## [53] glue_1.4.2        hms_1.1.0         yaml_2.2.1        colorspace_2.0-2
## [57] rvest_1.0.0       knitr_1.33        haven_2.4.1       sass_0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>

    <item>
      <title>Annotations</title>
      <link>https://cedricscherer.com/tags/annotations/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/annotations/</guid>
      <description></description>
    </item>

    <item>
      <title>R</title>
      <link>https://cedricscherer.com/tags/r/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/r/</guid>
      <description></description>
    </item>

    <item>
      <title>tidyverse</title>
      <link>https://cedricscherer.com/tags/tidyverse/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/tidyverse/</guid>
      <description></description>
    </item>

    <item>
      <title>tutorial</title>
      <link>https://cedricscherer.com/tags/tutorial/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/tutorial/</guid>
      <description></description>
    </item>

    <item>
      <title>climate</title>
      <link>https://cedricscherer.com/tags/climate/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/climate/</guid>
      <description></description>
    </item>

    <item>
      <title>colors</title>
      <link>https://cedricscherer.com/tags/colors/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/colors/</guid>
      <description></description>
    </item>

    <item>
      <title>Colors and Emotions in Data Visualization</title>
      <link>https://cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/2021/06/08/colors-and-emotions-in-data-visualization/</guid>
      <description>
&lt;script src=&#34;https://cedricscherer.com/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;em&gt;This blog post originally appeared as a &lt;a href=&#34;https://www.storytellingwithdata.com/blog/2021/6/8/colors-and-emotions-in-data-visualization&#34;&gt;guest post on the “Storytelling with Data” blog&lt;/a&gt; as part of the color series. Thanks again to Cole Knaflic and Mike Cisneros for inviting and motivating me as well as for your comments on the draft.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As we continue our exploration of color in data visualization this month, we are happy to share this guest post from notable #SWDchallenge contributor and community member Cédric Scherer. Before becoming a freelance data visualization specialist, Cédric was a trained ecologist, which required a unique combination of responsibilities: in addition to analysing and visualizing tons of animal data, he was also capturing foxes, raccoons, and hares in the wild! Now, he is combining his expertise in analysing and visualizing large data sets with his passion for design to create visualizations across all disciplines, purposes, and styles. We thank Cédric for sharing this post with us, and we hope you enjoy it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;span style=&#34;font-family:&amp;quot;Thrillers SemiBold&amp;quot;;font-size:28px;line-height:1.2;&#34;&gt;If you are only moved by color relationships, you are missing the point. I am interested in expressing the big emotions.&lt;/span&gt;&lt;span style=&#34;font-family:&amp;quot;Thrillers Regular&amp;quot;;font-size:28px;line-height:1.2;&#34;&gt; — Mark Rothko&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As data visualization practitioners we are both engineers and designers. In our effort to create meaningful visualizations from our data, we transmit our message not only through the particular chart type and title we choose, but also through our choice of colors for the data itself and for any additional design elements. Whether intentional or not, the colors we use in any visualization inevitably spark emotions in our viewers.&lt;/p&gt;
&lt;div id=&#34;warm-city-cold-city&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Warm city, cold city&lt;/h2&gt;
&lt;p&gt;When designing my contribution to the &lt;a href=&#34;https://www.storytellingwithdata.com/blog/2019/9/3/swdchallenge-visualize-uncertainty&#34;&gt;#SWDchallenge of September 2019 on the topic “Visualizing Uncertainty”&lt;/a&gt;, I depicted the variation in monthly temperatures in my hometown of Berlin.&lt;/p&gt;
&lt;p&gt;For me, it was straightforward to use a warm, reddish color palette and to display the temperature range in degrees of Celsius. To make it easily accessible for local people, I also created a version in German—and just for the sake of variety and to make them easily distinguishable at a glance, I created this version in a blue color scale.&lt;/p&gt;
&lt;img src=&#34;https://images.squarespace-cdn.com/content/v1/55b6a6dce4b089e11621d3ed/1623092163899-E6CYKSAW3GJTJ9KEGFU0/daily-temps-in-berlin.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain;&#34;&gt;
&lt;p&gt;
&lt;figcaption class=&#34;small&#34; align=&#34;center&#34; style=&#34;color:#8c8c8c;font-style:italic;&#34;&gt;
Variation in daily temperatures in Berlin, in English and German with two different color palettes.
&lt;/figcaption&gt;
&lt;/p&gt;
&lt;p&gt;Without any intention, the two variations of my visualization triggered different emotional reactions. While the red chart likely leads you to think “Wow, Berlin summers are quite hot,” the blue version may push you to think of summers as rainy and rather cold.&lt;/p&gt;
&lt;p&gt;In general, we should have in mind that different details might spark different emotions and expectations in our viewers. Some of these details will make it easier for them to understand the chart in the manner the designer intended.&lt;/p&gt;
&lt;p&gt;In the above example, how people perceive the temperatures in Berlin depends on (at least) two different factors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What does the color used in the chart commonly represent in the experience and culture of the reader?&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Which range of temperatures (or temperature scale) is the reader regularly exposed to?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While we cannot account for the last factor, the choice of colors is up to the designer. It is important though, that colors may be perceived differently depending on the audience.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;colors-and-their-associations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Colors and their associations&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Which colors do you associate with temperatures and precipitation?&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Which colors do you associate with trees and urban areas?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We are used to attributing certain colors to specific objects and emotions. Most people expect the sea to be colored in blue on a map; a green ocean looks plain wrong to us. Similarly, humans perceive bright colors on elevation maps to represent a high altitude, with darker colors representing naturally low-lying and shady areas like valleys.&lt;/p&gt;
&lt;p&gt;Temperatures are regularly displayed as a gradient from blue (cold) to red (hot). A famous example is this “warming stripes” design by Ed Hawkins:&lt;/p&gt;
&lt;img src=&#34;https://images.squarespace-cdn.com/content/v1/55b6a6dce4b089e11621d3ed/1623092203312-8BKCNNOD9QA0GJUIULPP/hawkins-warming-stripes.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain;&#34;&gt;
&lt;p&gt;
&lt;figcaption class=&#34;small&#34; align=&#34;center&#34; style=&#34;color:#8c8c8c;font-style:italic;&#34;&gt;
Warming stripes for 1850-2018 by Ed Hawkins, Climate Lab Book (4 December 2018).
&lt;/figcaption&gt;
&lt;/p&gt;
&lt;p&gt;Most people around the globe likely agree on the blue-red gradient when it comes to temperatures, and in first looking at this visual, we naturally translate each stripe into a relative temperature (difference) along this gradient. A legend or annotations explaining the color gradient, while adding specificity and detail, would weaken the minimalist style of the visualization, which is communicating not through the precision of numbers but through the inherent emotional reaction to the rapid change from decades of cool blues to warm, intense reds. (Nevertheless, there is also &lt;a href=&#34;https://showyourstripes.info/&#34;&gt;a version with minimal labeling&lt;/a&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;colors-spark-emotions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Colors spark emotions&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Which color set comes to your mind when you think about happiness and sadness?&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;What color would you pick to visualize honesty?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When it comes to emotions, things might get a bit more difficult. In 2007’s &lt;a href=&#34;https://books.google.de/books/about/Introduction_to_Multimodal_Analysis.html?id=xSyDAAAACAAJ&amp;amp;redir_esc=y&#34;&gt;“Introduction to Multimodal Analysis”&lt;/a&gt;, author David Machin proposed that lightness, brightness, and saturation can communicate the level of seriousness, intensity, and emotional weight in a visual work. Dark and saturated colors are thus perceived as more dramatic and can evoke emotions such as sadness and anger, while bright and flat colors achieve the opposite effect.&lt;/p&gt;
&lt;p&gt;Moreover, colors might be perceived differently in different cultures. A fantastic resource in this context is the &lt;a href=&#34;https://informationisbeautiful.net/visualizations/colours-in-cultures/&#34;&gt;“Colours in Culture” visualization&lt;/a&gt; by &lt;a href=&#34;http://davidmccandless.com/&#34;&gt;David McCandless&lt;/a&gt; and &lt;a href=&#34;https://alwayswithhonor.com/&#34;&gt;AlwaysWithHonor.com&lt;/a&gt;:&lt;/p&gt;
&lt;img src=&#34;https://images.squarespace-cdn.com/content/v1/55b6a6dce4b089e11621d3ed/1623092245319-DMGBMO4S9R14G0A1LYTP/colours-in-culture-iib.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain;&#34;&gt;
&lt;p&gt;
&lt;figcaption class=&#34;small&#34; align=&#34;center&#34; style=&#34;color:#8c8c8c;font-style:italic;&#34;&gt;
The visualization “Colours in Culture” by David McCandless and AlwaysWithHonor.com summarizes the meaning of colors across the world in a visually appealing way.
&lt;/figcaption&gt;
&lt;/p&gt;
&lt;p&gt;We make use of these emotional values all the time, either with or without attention. Thus, I often come back to the “culture–color wheel” when designing visualizations since Cole showed it to me. We can see that Ed Hawkins’ use of red and blue is an emotionally good choice since the colors are interpreted as &lt;em&gt;heat&lt;/em&gt; [41] and &lt;em&gt;cold&lt;/em&gt; [10], respectively, in all cultures.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bloody-red-covid-maps&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bloody-red COVID maps&lt;/h2&gt;
&lt;p&gt;Take, as another example, the famous COVID-19 tracker hosted by Johns Hopkins University that became popular in early 2020. The dark map used bloody red bubbles to display reported infections or deaths due to the novel coronavirus. It’s likely that these color choices elicited anxiety and fear in many of its viewers, thanks to the &lt;a href=&#34;https://twitter.com/visualisingdata/status/1237276833286103045&#34;&gt;“alien-death-blood visual identity,”&lt;/a&gt; as data visualization consultant Andy Kirk termed it at the time.&lt;/p&gt;
&lt;p&gt;While a black map might be attention-grabbing, it likely also sparks panic in some people. In many cultures, black is associated with &lt;em&gt;death&lt;/em&gt; and &lt;em&gt;evil&lt;/em&gt;, and red is not only associated with &lt;em&gt;love&lt;/em&gt; and &lt;em&gt;passion&lt;/em&gt; but also &lt;em&gt;blood&lt;/em&gt; or &lt;em&gt;anger&lt;/em&gt;. As a resource meant to inform the public during the early days of a serious and deadly pandemic, this tracker used colors that, unfortunately, likely inspired additional panic and fear in some of its audience.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.datawrapper.de/coronaviruscharts/&#34;&gt;Lisa Charlotte Rost and her team of Datawrapper&lt;/a&gt; were among several other designers who took different approaches, using less intimidating colors on a light background. (Johns Hopkins University themselves did the same in &lt;a href=&#34;https://coronavirus.jhu.edu/data/new-cases-50-states&#34;&gt;other COVID graphics&lt;/a&gt; they eventually developed.)&lt;/p&gt;
&lt;p&gt;Rost explained the reasoning from a very emotional and personal standpoint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you’re infected, you want to find yourself on a map as a blue (or orange, or beige, or purple…) dot, not as a “attention, danger, run!”-screaming red dot. Related, we show deaths in black, not red – it feels more respectful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;https://images.squarespace-cdn.com/content/v1/55b6a6dce4b089e11621d3ed/1623092295406-ER9FYEYQDE2U7LC6IYD8/covid-maps.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain;&#34;&gt;
&lt;p&gt;
&lt;figcaption class=&#34;small&#34; align=&#34;center&#34; style=&#34;color:#8c8c8c;font-style:italic;&#34;&gt;
The famous COVID-19 tracker by the John Hopkins University using an “alien-death-blood visual identity” (&lt;a href=&#39;https://coronavirus.jhu.edu/map.html&#39;&gt;coronavirus.jhu.edu/map.html&lt;/a&gt;; Screenshot 2020-07-27) next to a map of confirmed COVID-19 cases by Datawrapper using more decent colors to avoid an emotion of fear (&lt;a href=&#39;blog.datawrapper.de/coronaviruscharts&#39;&gt;blog.datawrapper.de/coronaviruscharts&lt;/a&gt;; Screenshot 2020-07-27).
&lt;/figcaption&gt;
&lt;/p&gt;
&lt;p&gt;In general, I try to avoid black backgrounds as often as possible, although I will use dark gray colors in those cases where dark scenery simply looks better. Light colors may in most cases be a better choice since the color represents truce [79], purity [67] and trust [80] — characteristics that we all certainly like to get as feedback on our data visualizations.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;colors-of-healing-visualizing-vaccinations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Colors of healing: visualizing vaccinations&lt;/h2&gt;
&lt;p&gt;As of this writing in June 2021, we are in a very different phase of COVID-19 pandemic than we were when those trackers were first launched in early 2020. While we are still collecting data on negative events like infections, hospitalizations, and deaths, our visualizations are now focusing more and more on the positive events: vaccinations and vaccination rates. Many of the charts and maps showing how countries perform on this metric are designed on light backgrounds.&lt;/p&gt;
&lt;img src=&#34;https://images.squarespace-cdn.com/content/v1/55b6a6dce4b089e11621d3ed/1623092352309-DJIK4US9EJ0NJYTHS7MX/immunization-bars-and-waffles.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain;&#34;&gt;
&lt;p&gt;
&lt;figcaption class=&#34;small&#34; align=&#34;center&#34; style=&#34;color:#8c8c8c;font-style:italic;&#34;&gt;
Some exemplary graphs from the “COVID-19 Impfdashboard” using moderate blue on light gray and white backgrounds. The chart is maintained by the German Federal Ministry of Health in collaboration with the Robert Koch-Institute (RKI) and was designed by Studio NAND and Moritz Stefaner.
&lt;/figcaption&gt;
&lt;/p&gt;
&lt;p&gt;Let’s take a look at the wonderful &lt;a href=&#34;https://impfdashboard.de/&#34;&gt;COVID-19 vaccination dashboard&lt;/a&gt; by the German Federal Ministry of Health in collaboration with the Robert Koch-Institute (RKI). This dashboard shows vaccination rates in Germany with moderate blue graphs on a light background. Blue is a versatile color, representing many different values around the world. However, by intention or by chance, the designers’ choice of blue is a very good one: in Western cultures the color is not only attributed to cold but also to values such as healing, freedom and rationality.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-thoughts&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;I love colors. Ever since my contribution to the #SWDchallenge, I have learned to take even more care when I choose colors and try to avoid stereotypic colors, especially those that spark certain emotions or are associated with features I actually don’t want to communicate with my visualization.&lt;/p&gt;
&lt;p&gt;If you like, creating a suitable emotional setting can be subsumed under the term accessibility: more familiar colors will help the reader to access the visualization and may reduce the guidance needed to explain certain features.&lt;/p&gt;
&lt;p&gt;On the contrary, badly chosen colors may in the worst case mislead the reader or put them in the wrong mindset to accept the intended message, which is definitely something I want to avoid as a truthful designer.&lt;/p&gt;
&lt;p&gt;Picking suitable colors—not only in terms of accessibility but also based on their emotional values—is an important skill for every designer to practice.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>

    <item>
      <title>COVID–19</title>
      <link>https://cedricscherer.com/tags/covid19/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/covid19/</guid>
      <description></description>
    </item>

    <item>
      <title>cultures</title>
      <link>https://cedricscherer.com/tags/cultures/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/cultures/</guid>
      <description></description>
    </item>

    <item>
      <title>emotions</title>
      <link>https://cedricscherer.com/tags/emotions/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/emotions/</guid>
      <description></description>
    </item>

    <item>
      <title>Chart selection</title>
      <link>https://cedricscherer.com/tags/chart-selection/</link>
      <pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate>

      <guid>https://cedricscherer.com/tags/chart-selection/</guid>
      <description></description>
    </item>

  </channel>
</rss>
